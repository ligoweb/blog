[{"title":"hexo常用命令笔记","date":"2017-04-19T16:30:02.000Z","path":"2017/04/20/2017-4-20-hexo常用命令/","text":"hexo安装初始化123npm install hexo -g // 全局安装hexonpm update hexo -g // 升级hexohexo init // 初始化 简写命令hexo n “我的博客” == hexo new “我的博客” // 新建文章hexo p == hexo publishhexo g == hexo generate // 生成hexo s == hexo server // 启动服务预览hexo d == hexo deploy // 部署 服务器hexo server // hexo会监视文件变动并自动更新，无需启动服务器hexo server -s // 静态模式hexo server -p 5000 // 更改端口hexo server -i 192.168.1.1 // 自定义IP hexo clean // 清除缓存，网页正常情况下可以忽略此条命令hexo g // 生成静态网页hexo d // 开始部署 监视文件变动hexo generate // 使用Hexo生成静态文件快速而且简单hexo generate –watch // 监视文件变动 完成后部署 两个命令的作用是相同的hexo generate –deployhexo deploy –generate hexo deploy -ghexo server -g 草稿hexo publish [layout] 模板hexo new “postName” // 新建文章hexo new page “pageName” // 新建页面hexo generate // 生成静态页面至public目录hexo server // 开启预览访问端口（默认端口4000，‘ctrl+c’关闭server）hexo deploy // 讲.deploy目录部署到GitHub hexo new [layout] hexo new photo “XXX”hexo new “hello world” –lang en 变量 描述 layout 布局 title 标题 data 文件建立日期 12345678title: 使用Hexo搭建个人博客layout: postdate: 2017-04-20 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: hexo博客 设置文章摘要 以上是文章摘要 &lt;！– more –&gt; 以下是余下全文 写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 原文转摘：https://segmentfault.com/a/1190000002632530","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://ligoweb.com/tags/Hexo/"}]},{"title":"webpack学习笔记","date":"2017-04-04T03:49:34.000Z","path":"2017/04/04/2017-4-4-webpack学习笔记/","text":"webpack是当下最热门的前端资源模块化管理和打包工具，它能将各种资源，例如CommonJs模块、AMD模块、ES6模块、JSON、LESS/SESS、Vue等文件打包成符合生产环节部署的前端资源。webpack官网是：http://webpack.github.io webpack和gulp/grunt有什么区别gulp/grunt是一种能够优化前端开发流程的工具，而webpack是一种模块化的解决方案;gulp/grunt的工作方式是：在一个配置文件中，指明对某些文件进行编译、组合、压缩等任务的具体操作，这个工具之后能够自动替你完成这些任务，依赖各种相应的插件。 webpack工作流 webpack的工作方式是：把你的项目当做一个整体，通过给定的主文件（如index.js）,webpack将从这个文件开始找到你项目的所有依赖文件，使用loaders处理它们。最后打包为一个浏览器可以识别的javascript文件 webpack工作流 webpack的优势 webpack是以commonJS的形式书写脚本的，但对AMD/CMD的支持也很全面，方便旧项目进行代码迁移 能被模块化的不仅仅是JS 开发便捷，能替代部分grunt/gulp的工作，比如打包、压缩、图片转base64等 扩展性强，插件机制完善，支持热加载 webpack的安装使用12345678mkdir webpack-demo //新建webpack-deom文件夹cd webpack-demo //切换至该文件夹目录npm init -y //初始化npm install --save-dev webpack //安装webpackwebpack index.js build.js //将index.js文件打包后生成build.jsnpm install css-loader style-loader --save-dev //安装css文件支持和样式支持webpack index.js build.js --module-bind &apos;css=style-loader!css-loader&apos; //引入css模块进行打包webpack index.css build.js --module-bind &apos;css=style-loader!css-loader&apos; --watch //监视打包文件的改动实时编译 webpack.config.js配置 每个项目下都需配置一个默认的webpack.config.js文件，在命令行中执行webpack命令会自动执行webpack.config.js文件 12345678910var path = require(&apos;path&apos;)module.exports = &#123; entry: &apos;./src/script/main.js&apos;, // 入口文件 output: &#123; path: path.resolve(__dirname, &apos;./dist/js&apos;), filename: &apos;build.js&apos; &#125; // 打包后的路径及文件名&#125; entry和output entry是页面入口文件配置，可以支持多个入口文件output是对于的输出配置，如果filename指定文件名则打包成一个文件，如果加入[id]、[name]、[hash]、[chunckhash]则打包成多个对应的文件 123456789entry: &#123; home: &quot;./home.js&quot;, about: &quot;./about.js&quot;, contact: &quot;./contact.js&quot;&#125;,output: &#123; path: path.resolve(__dirname, &apos;./dist/js&apos;), filename: &quot;[name].build.js&quot;&#125;","tags":[{"name":"webpack","slug":"webpack","permalink":"http://ligoweb.com/tags/webpack/"}]},{"title":"canvas","date":"2016-12-20T03:14:55.000Z","path":"2016/12/20/2016-12-20-canvas画图/","text":"什么是canvas?HTML5中新加入了元素标签用户图形的绘制，借助于javascript可以完成许多复杂图形的绘制工作。使用canvas可以从以下几个步骤入手： 1、创建一个画布通过在html中加入下列代码： 1&lt;canvas id=&apos;myCanvas&apos;&gt;&lt;/canvas&gt; 就可以建立一个画布canvas画布 2、javascript引入canvas绘图API1234var cav =document.getElementById(&apos;myCanvas&apos;); //通过id获取canvas对象var ctx=c.getContext(&apos;2d&apos;);//创建context，该对象为H5内置对象，拥有绘制API方法cav.width=300; //指定画布的宽度cav.heigth=300; //指定画布的高度 3、绘制路径在canvas画布中我们可以使用以下法进行路径线条的绘制： moveTo(x,y) 定义绘制线条的开始坐标 lineTo(x,y) 定义绘制线条的结束坐标 stroke() 调用绘制方法进行绘制 例 12345ctx.moveTo(100,100); //定于开始坐标ctx.lineTo(100,200); //定义结束坐标ctx.lineWidth=2; //定义线条宽度ctx.strokeStyle=&quot;#ffaadd&quot;; //定义线条颜色ctx.stroke(); //开始绘制 执行上述JS代码就会在画布上绘制一条直线，宽度为2px,线条颜色为粉红色 4、绘制弧形我们可以使用 arc(x,y,r,sAngle,eAngle,boole) x,y为弧形中心坐标，r会弧形半径，sAngle为绘制起始弧度角，eAngle为绘制结束弧度角，boole为可选参数，默认为false,顺时针绘制，设置true后将逆时针绘制。 例 1234ctx.art(100,100,100,0,2*Math.PI); //定义弧形绘制参数 ctx.lineWidth=5; //定义线条宽度ctx.strokeStyle=&quot;#ffaadd&quot;; //定义线条颜色ctx.stroke(); //开始绘制 执行上述JS代码就会在画布上绘制一个半径为100，线宽为5px,线条颜色为粉红色的圆。 5、绘制多个图形我们可以使用 beginPath() 该方法为重新起始一条绘制路径 例 1234567891011121314ctx.moveTo(50,100);ctx.lineTo(50,200);ctx.lineWidth=10;ctx.strokeStyle=&quot;#ffaa33&quot;;ctx.stroke();//绘制一条直线ctx.beginPath(); //重新起始一个绘制点ctx.arc(150,150,50,0,2*Math.PI);ctx.lineWidth=5;ctx.strokeStyle=&quot;#ffaadd&quot;;ctx.stroke();//绘制一个圆 6、进行颜色填充可以使用 fillStyle 定义填充的样式，包括颜色、渐变或模式 fill() 绘制完成后进行填充 例 12345678910111213141516ctx.moveTo(50,100);ctx.lineTo(50,200);ctx.lineWidth=10;ctx.strokeStyle=&quot;#ffaa33&quot;;ctx.stroke();//绘制一条直线ctx.beginPath(); //重新起始一个绘制点ctx.arc(150,150,50,0,2*Math.PI);ctx.lineWidth=10;ctx.strokeStyle=&quot;#ffaadd&quot;;ctx.stroke();//绘制一个圆ctx.fillStyle=&quot;#0000ff&quot;; //定义填充的颜色ctx.fill(); //开始填充 7、创建渐变可以使用 createLinearGradient(x0,y0,x1,y1) 创建线性渐变,x0,y0为渐变起始点坐标，x1,y1为渐变结束点坐标 createRadialGradient(x0,y0,r0,x1,y1,r1) 创建径向渐变,x0,y0,r0为渐变开始的圆的坐标及半径，x1,y1,r1为渐变结束的圆的坐标及半径 addColorStop(stop,color) 定义渐变位置及颜色stop为渐变的位置，介于0-1的数字，color为当前位置的颜色，可以设置多个addColoStop()方法以实现多种颜色之间的渐变 例 1234567891011121314151617181920212223242526var cav=document.getElementById(&apos;canvas&apos;); //获取canvas对象var ctx=canvas.getContext(&apos;2d&apos;); //引入canvasAPIvar clg=ctx.createLinearGradient(50,50,50,200); //创建线性渐变clg.addColorStop(0,&quot;#0a00b2&quot;); //0%位置的渐变颜色clg.addColorStop(0.5,&quot;#ff0000&quot;); //50%位置的渐变颜色clg.addColorStop(1,&quot;#fffc00&quot;); //100%位置的渐变颜色var crg=ctx.createRadialGradient(150,150,10,150,150,40); //创建径向渐变crg.addColorStop(0,&quot;red&quot;); //0%位置的渐变颜色crg.addColorStop(1,&quot;white&quot;); //100%位置的渐变颜色cav.width=300; //设置画布宽度cav.height=300; //设置画布高度 ctx.moveTo(50,50); //设置画笔起点 ctx.lineTo(50,200); //设置画笔终点ctx.lineWidth=10; //设置画笔大小ctx.strokeStyle=clg; //设置渐变方式ctx.stroke(); //开始绘制ctx.beginPath(); //开始另一个画笔起点ctx.arc(150,150,50,0,2*Math.PI); //设置弧形参数 ctx.lineWidth=10; //设置画笔大小ctx.strokeStyle=&quot;#ffaadd&quot;; //设置画笔颜色ctx.stroke(); //开始绘制ctx.fillStyle=crg; //设置填充渐变方式ctx.fill(); //开始填充 这些基本的方法就可以满足我们一些简单的图形绘制了，但是还有许多复杂的绘制API，利用这些方法我们还可以绘制更加复杂的图形，更多方法可以参考W3C规范","tags":[{"name":"HTML5","slug":"HTML5","permalink":"http://ligoweb.com/tags/HTML5/"},{"name":"canvas","slug":"canvas","permalink":"http://ligoweb.com/tags/canvas/"}]},{"title":"nodeJs服务器建立","date":"2016-12-20T03:14:55.000Z","path":"2016/12/20/2016-12-20-nodeJS建立服务器/","text":"如何利用node.js创建一个简单的服务器并实现数据传输呢？ 1、创建app.js文件我们可以本地创建一个node文件夹，然后在该文件夹下先新建一个app.js文件,在app.js文件中编写以下代码： 12345678910111213141516// 引入node.js的http模块，并设置服务器地址和端口const http = require(&apos;http&apos;);const hostname = &apos;127.0.0.1&apos;const port = 3000;// 创建一个web服务器并根据相应状态返回相应值const server = http.createServer((req, res) =&gt; &#123; res.statusCode = 200; res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;); res.end(&apos;Hello world\\n&apos;);&#125;);// 监听服务器端口并打印日志信息server.listen(port, hostname, () =&gt; &#123; console.log(&apos;Server running at http://$(hostname):$&#123;port&#125;/&apos;);&#125;); 在命令行中切换到node文件夹，使用node命令运行server.js文件 12$ node server.jsServer running at http://127.0.0.1:3000/","tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://ligoweb.com/tags/Node-js/"}]},{"title":"Hexo默认端口","date":"2016-11-09T03:14:55.000Z","path":"2016/11/09/2016-11-09-heox默认端口/","text":"我们在使用hexo框架搭建个人博客时进行本地预览效果时通常是输入下面的指令 1$ hexo s 命令控制台会输出以下结果： 123$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 表示服务已经在4000端口开启，之后就可以在浏览器地址栏输入http://localhost:4000进行本地预览。但结果有时后浏览器会提示无法访问当前地址，这种情况大多数是因为4000端口被占用了，如果查看系统端口占用情况的话会看到有其它程序正在使用当前端口。针对这个问题我们有两种解决方案：1、临时修改服务端口指令 1$ hexo server -p 5000 这种方法可以将服务端口临时修改为5000端口，修改完之后就可以打开浏览器进入localhost:5000进行本地效果的预览。 2、修改hexo默认服务端口 我们进入到hexo根目录，找到node_modules文件夹，然后找到hexo-server文件夹，在该文件夹下找到配置文件进行修改，主要修改两个文件，一个是index.js文件，打开该文件后将里面的port参数修改为5000，另一个是lib文件夹下的server.js文件，同样的方法将原来的参数4000修改为5000，这样重新运行hexo就可以会将默认服务端口修改为5000。 123$ hexo sINFO Start processingINFO Hexo is running at http://localhost:5000/. Press Ctrl+C to stop. 这样每次重新部署时候，我们都可以进入浏览器在localhost:5000进行本地预览。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://ligoweb.com/tags/Hexo/"}]},{"title":"Hello World","date":"2016-10-11T03:07:41.000Z","path":"2016/10/11/2016-10-11-hello-world/","text":"Hello World By HexoWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://ligoweb.com/tags/Hexo/"}]}]